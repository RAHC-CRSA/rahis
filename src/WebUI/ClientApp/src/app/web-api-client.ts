//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IDeleteUserClient {
    /**
     * Deletes a user
     */
    handle(request: DeleteUserCommand): Observable<string>;
}

@Injectable({
    providedIn: 'root'
})
export class DeleteUserClient implements IDeleteUserClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Deletes a user
     */
    handle(request: DeleteUserCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetUsersClient {
    /**
     * Gets the list of users
     */
    handle(): Observable<UserListDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class GetUsersClient implements IGetUsersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets the list of users
     */
    handle(): Observable<UserListDto[]> {
        let url_ = this.baseUrl + "/api/users";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserListDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserListDto[]>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<UserListDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserListDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAddSpeciesClient {
    /**
     * Adds a species
     */
    handle(request: AddSpeciesCommand): Observable<SpeciesDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AddSpeciesClient implements IAddSpeciesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Adds a species
     */
    handle(request: AddSpeciesCommand): Observable<SpeciesDto> {
        let url_ = this.baseUrl + "/api/species";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SpeciesDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SpeciesDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<SpeciesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SpeciesDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDeleteSpeciesClient {
    /**
     * Deletes a species
     */
    handle(request: DeleteSpeciesCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class DeleteSpeciesClient implements IDeleteSpeciesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Deletes a species
     */
    handle(request: DeleteSpeciesCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/species";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetSpeciesClient {
    /**
     * Gets the list of species
     */
    handle(): Observable<SpeciesDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class GetSpeciesClient implements IGetSpeciesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets the list of species
     */
    handle(): Observable<SpeciesDto[]> {
        let url_ = this.baseUrl + "/api/species";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SpeciesDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SpeciesDto[]>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<SpeciesDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SpeciesDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IUpdateSpeciesClient {
    /**
     * Updates a species
     */
    handle(request: UpdateSpeciesCommand): Observable<SpeciesDto>;
}

@Injectable({
    providedIn: 'root'
})
export class UpdateSpeciesClient implements IUpdateSpeciesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Updates a species
     */
    handle(request: UpdateSpeciesCommand): Observable<SpeciesDto> {
        let url_ = this.baseUrl + "/api/species";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SpeciesDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SpeciesDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<SpeciesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SpeciesDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAddDiagnosticTestClient {
    /**
     * Adds a diagnostic test record to a report
     */
    handle(request: AddDiagnosticTestCommand): Observable<void>;
}

@Injectable({
    providedIn: 'root'
})
export class AddDiagnosticTestClient implements IAddDiagnosticTestClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Adds a diagnostic test record to a report
     */
    handle(request: AddDiagnosticTestCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/reports/add-diagnostic-test";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ServerResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAddVaccinationClient {
    /**
     * Adds a vaccination record to a report
     */
    handle(request: AddVaccinationCommand): Observable<VaccinationDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AddVaccinationClient implements IAddVaccinationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Adds a vaccination record to a report
     */
    handle(request: AddVaccinationCommand): Observable<VaccinationDto> {
        let url_ = this.baseUrl + "/api/reports/add-vaccination";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VaccinationDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VaccinationDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<VaccinationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VaccinationDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = VaccinationDto.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ICreateReportClient {
    /**
     * Creates a report
     */
    handle(request: CreateReportCommand): Observable<ReportDto>;
}

@Injectable({
    providedIn: 'root'
})
export class CreateReportClient implements ICreateReportClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Creates a report
     */
    handle(request: CreateReportCommand): Observable<ReportDto> {
        let url_ = this.baseUrl + "/api/reports";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReportDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReportDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<ReportDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReportDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDeleteReportClient {
    /**
     * Deletes a report
     */
    handle(request: DeleteReportCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class DeleteReportClient implements IDeleteReportClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Deletes a report
     */
    handle(request: DeleteReportCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/reports";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetReportsClient {
    /**
     * Gets the list of reports
     * @param isVerified (optional) 
     * @param countryId (optional) 
     */
    handle(isVerified: boolean | null | undefined, countryId: number | null | undefined): Observable<ReportListDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class GetReportsClient implements IGetReportsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets the list of reports
     * @param isVerified (optional) 
     * @param countryId (optional) 
     */
    handle(isVerified: boolean | null | undefined, countryId: number | null | undefined): Observable<ReportListDto[]> {
        let url_ = this.baseUrl + "/api/reports?";
        if (isVerified !== undefined && isVerified !== null)
            url_ += "IsVerified=" + encodeURIComponent("" + isVerified) + "&";
        if (countryId !== undefined && countryId !== null)
            url_ += "CountryId=" + encodeURIComponent("" + countryId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReportListDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReportListDto[]>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<ReportListDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ReportListDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDeleteOccurrenceClient {
    /**
     * Deletes an occurrence
     */
    handle(request: DeleteOccurrenceCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class DeleteOccurrenceClient implements IDeleteOccurrenceClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Deletes an occurrence
     */
    handle(request: DeleteOccurrenceCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/reports/occurrences";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetOccurrencesClient {
    /**
     * Gets the list of occurrences
     * @param countryId (optional) 
     */
    handle(countryId: number | null | undefined): Observable<OccurrenceDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class GetOccurrencesClient implements IGetOccurrencesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets the list of occurrences
     * @param countryId (optional) 
     */
    handle(countryId: number | null | undefined): Observable<OccurrenceDto[]> {
        let url_ = this.baseUrl + "/api/reports/occurrences?";
        if (countryId !== undefined && countryId !== null)
            url_ += "CountryId=" + encodeURIComponent("" + countryId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OccurrenceDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OccurrenceDto[]>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<OccurrenceDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OccurrenceDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetReportClient {
    /**
     * Gets a report by id
     */
    handle(reportId: number): Observable<ReportDto>;
}

@Injectable({
    providedIn: 'root'
})
export class GetReportClient implements IGetReportClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets a report by id
     */
    handle(reportId: number): Observable<ReportDto> {
        let url_ = this.baseUrl + "/api/report/{ReportId}";
        if (reportId === undefined || reportId === null)
            throw new Error("The parameter 'reportId' must be defined.");
        url_ = url_.replace("{ReportId}", encodeURIComponent("" + reportId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReportDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReportDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<ReportDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReportDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISendNotificationClient {
    /**
     * Sends a notification
     */
    handle(request: SendNotificationCommand): Observable<ServerResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class SendNotificationClient implements ISendNotificationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Sends a notification
     */
    handle(request: SendNotificationCommand): Observable<ServerResponse> {
        let url_ = this.baseUrl + "/api/reports/send-notification";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServerResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServerResponse>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<ServerResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServerResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IVerifyReportClient {
    /**
     * Verifies a report
     */
    handle(request: VerifyReportCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class VerifyReportClient implements IVerifyReportClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Verifies a report
     */
    handle(request: VerifyReportCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/reports/verify";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAddCommunityClient {
    /**
     * Adds a community
     */
    handle(request: AddCommunityCommand): Observable<CommunityDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AddCommunityClient implements IAddCommunityClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Adds a community
     */
    handle(request: AddCommunityCommand): Observable<CommunityDto> {
        let url_ = this.baseUrl + "/api/communities";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CommunityDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CommunityDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<CommunityDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CommunityDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ServerResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDeleteCommunityClient {
    /**
     * Deletes a community
     */
    handle(request: DeleteCommunityCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class DeleteCommunityClient implements IDeleteCommunityClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Deletes a community
     */
    handle(request: DeleteCommunityCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/communities";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetCommunitiesClient {
    /**
     * Gets the list of communities
     * @param districtId (optional) 
     */
    handle(districtId: number | null | undefined): Observable<CommunityDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class GetCommunitiesClient implements IGetCommunitiesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets the list of communities
     * @param districtId (optional) 
     */
    handle(districtId: number | null | undefined): Observable<CommunityDto[]> {
        let url_ = this.baseUrl + "/api/communities?";
        if (districtId !== undefined && districtId !== null)
            url_ += "districtId=" + encodeURIComponent("" + districtId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CommunityDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CommunityDto[]>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<CommunityDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CommunityDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ServerResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAddCountryClient {
    /**
     * Adds a country
     */
    handle(request: AddCountryCommand): Observable<CountryDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AddCountryClient implements IAddCountryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Adds a country
     */
    handle(request: AddCountryCommand): Observable<CountryDto> {
        let url_ = this.baseUrl + "/api/countries";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CountryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CountryDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<CountryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CountryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ServerResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetCountriesClient {
    /**
     * Gets the list of countries
     */
    handle(): Observable<CountryDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class GetCountriesClient implements IGetCountriesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets the list of countries
     */
    handle(): Observable<CountryDto[]> {
        let url_ = this.baseUrl + "/api/countries";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CountryDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CountryDto[]>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<CountryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CountryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ServerResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAddDistrictClient {
    /**
     * Adds a district
     */
    handle(request: AddDistrictCommand): Observable<DistrictDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AddDistrictClient implements IAddDistrictClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Adds a district
     */
    handle(request: AddDistrictCommand): Observable<DistrictDto> {
        let url_ = this.baseUrl + "/api/districts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DistrictDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DistrictDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<DistrictDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DistrictDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ServerResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDeleteDistrictClient {
    /**
     * Deletes a district
     */
    handle(request: DeleteDistrictCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class DeleteDistrictClient implements IDeleteDistrictClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Deletes a district
     */
    handle(request: DeleteDistrictCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/districts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetDistrictsClient {
    /**
     * Gets the list of districts
     * @param municipalityId (optional) 
     */
    handle(municipalityId: number | null | undefined): Observable<DistrictDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class GetDistrictsClient implements IGetDistrictsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets the list of districts
     * @param municipalityId (optional) 
     */
    handle(municipalityId: number | null | undefined): Observable<DistrictDto[]> {
        let url_ = this.baseUrl + "/api/districts?";
        if (municipalityId !== undefined && municipalityId !== null)
            url_ += "municipalityId=" + encodeURIComponent("" + municipalityId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DistrictDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DistrictDto[]>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<DistrictDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DistrictDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ServerResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAddMunicipalityClient {
    /**
     * Adds a municipality
     */
    handle(request: AddMunicipalityCommand): Observable<MunicipalityDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AddMunicipalityClient implements IAddMunicipalityClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Adds a municipality
     */
    handle(request: AddMunicipalityCommand): Observable<MunicipalityDto> {
        let url_ = this.baseUrl + "/api/municipalities";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MunicipalityDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MunicipalityDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<MunicipalityDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MunicipalityDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ServerResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDeleteMunicipalityClient {
    /**
     * Deletes a municipality
     */
    handle(request: DeleteMunicipalityCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class DeleteMunicipalityClient implements IDeleteMunicipalityClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Deletes a municipality
     */
    handle(request: DeleteMunicipalityCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/municipalities";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetMunicipalitiesClient {
    /**
     * Gets the list of municipalities
     * @param regionId (optional) 
     */
    handle(regionId: number | null | undefined): Observable<MunicipalityDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class GetMunicipalitiesClient implements IGetMunicipalitiesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets the list of municipalities
     * @param regionId (optional) 
     */
    handle(regionId: number | null | undefined): Observable<MunicipalityDto[]> {
        let url_ = this.baseUrl + "/api/municipalities?";
        if (regionId !== undefined && regionId !== null)
            url_ += "regionId=" + encodeURIComponent("" + regionId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MunicipalityDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MunicipalityDto[]>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<MunicipalityDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MunicipalityDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ServerResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAddRegionClient {
    /**
     * Adds a region to a country
     */
    handle(request: AddRegionCommand): Observable<RegionDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AddRegionClient implements IAddRegionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Adds a region to a country
     */
    handle(request: AddRegionCommand): Observable<RegionDto> {
        let url_ = this.baseUrl + "/api/regions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RegionDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RegionDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<RegionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RegionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ServerResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDeleteRegionClient {
    /**
     * Deletes a region
     */
    handle(request: DeleteRegionCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class DeleteRegionClient implements IDeleteRegionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Deletes a region
     */
    handle(request: DeleteRegionCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/regions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetRegionsClient {
    /**
     * Gets the list of regions
     * @param countryId (optional) 
     */
    handle(countryId: number | null | undefined): Observable<RegionDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class GetRegionsClient implements IGetRegionsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets the list of regions
     * @param countryId (optional) 
     */
    handle(countryId: number | null | undefined): Observable<RegionDto[]> {
        let url_ = this.baseUrl + "/api/regions?";
        if (countryId !== undefined && countryId !== null)
            url_ += "countryId=" + encodeURIComponent("" + countryId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RegionDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RegionDto[]>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<RegionDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RegionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ServerResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAddRecipientClient {
    /**
     * Allows an admin to add a notification recipient
     */
    handle(request: AddRecipientCommand): Observable<NotificationRecipientDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AddRecipientClient implements IAddRecipientClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Allows an admin to add a notification recipient
     */
    handle(request: AddRecipientCommand): Observable<NotificationRecipientDto> {
        let url_ = this.baseUrl + "/api/notification-recipients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NotificationRecipientDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NotificationRecipientDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<NotificationRecipientDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NotificationRecipientDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDeleteRecipientClient {
    /**
     * Deletes a notification recipient
     */
    handle(request: DeleteRecipientCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class DeleteRecipientClient implements IDeleteRecipientClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Deletes a notification recipient
     */
    handle(request: DeleteRecipientCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/notification-recipients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetRecipientsClient {
    /**
     * Gets the list of notification recipients
     */
    handle(): Observable<NotificationRecipientDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class GetRecipientsClient implements IGetRecipientsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets the list of notification recipients
     */
    handle(): Observable<NotificationRecipientDto[]> {
        let url_ = this.baseUrl + "/api/notification-recipients";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NotificationRecipientDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NotificationRecipientDto[]>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<NotificationRecipientDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NotificationRecipientDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAddInstitutionClient {
    /**
     * Adds an institution
     */
    handle(request: AddInstitutionCommand): Observable<InstitutionDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AddInstitutionClient implements IAddInstitutionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Adds an institution
     */
    handle(request: AddInstitutionCommand): Observable<InstitutionDto> {
        let url_ = this.baseUrl + "/api/institutions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InstitutionDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InstitutionDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<InstitutionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InstitutionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDeleteInstitutionClient {
    /**
     * Deletes an institution
     */
    handle(request: DeleteInstitutionCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class DeleteInstitutionClient implements IDeleteInstitutionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Deletes an institution
     */
    handle(request: DeleteInstitutionCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/institutions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetInstitutionsClient {
    /**
     * Gets the list of institutions
     */
    handle(): Observable<InstitutionDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class GetInstitutionsClient implements IGetInstitutionsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets the list of institutions
     */
    handle(): Observable<InstitutionDto[]> {
        let url_ = this.baseUrl + "/api/institutions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InstitutionDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InstitutionDto[]>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<InstitutionDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(InstitutionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IUpdateInstitutionClient {
    /**
     * Updates an institution
     */
    handle(request: UpdateInstitutionCommand): Observable<InstitutionDto>;
}

@Injectable({
    providedIn: 'root'
})
export class UpdateInstitutionClient implements IUpdateInstitutionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Updates an institution
     */
    handle(request: UpdateInstitutionCommand): Observable<InstitutionDto> {
        let url_ = this.baseUrl + "/api/institutions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InstitutionDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InstitutionDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<InstitutionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InstitutionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAddParaProfessionalClient {
    /**
     * Adds a para-professional
     */
    handle(request: AddParaProfessionalCommand): Observable<ParaProfessionalDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AddParaProfessionalClient implements IAddParaProfessionalClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Adds a para-professional
     */
    handle(request: AddParaProfessionalCommand): Observable<ParaProfessionalDto> {
        let url_ = this.baseUrl + "/api/para-professionals";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ParaProfessionalDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ParaProfessionalDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<ParaProfessionalDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ParaProfessionalDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDeleteParaProfessionalClient {
    /**
     * Deletes a para-professional
     */
    handle(request: DeleteParaProfessionalCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class DeleteParaProfessionalClient implements IDeleteParaProfessionalClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Deletes a para-professional
     */
    handle(request: DeleteParaProfessionalCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/para-professionals";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetParaProfessionalsClient {
    /**
     * Gets the list of para-professionals
     * @param institutionId (optional) 
     */
    handle(institutionId: number | null | undefined): Observable<ParaProfessionalDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class GetParaProfessionalsClient implements IGetParaProfessionalsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets the list of para-professionals
     * @param institutionId (optional) 
     */
    handle(institutionId: number | null | undefined): Observable<ParaProfessionalDto[]> {
        let url_ = this.baseUrl + "/api/para-professionals?";
        if (institutionId !== undefined && institutionId !== null)
            url_ += "institutionId=" + encodeURIComponent("" + institutionId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ParaProfessionalDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ParaProfessionalDto[]>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<ParaProfessionalDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ParaProfessionalDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IUpdateParaProfessionalClient {
    /**
     * Updates a para-professional
     */
    handle(request: UpdateParaProfessionalCommand): Observable<ParaProfessionalDto>;
}

@Injectable({
    providedIn: 'root'
})
export class UpdateParaProfessionalClient implements IUpdateParaProfessionalClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Updates a para-professional
     */
    handle(request: UpdateParaProfessionalCommand): Observable<ParaProfessionalDto> {
        let url_ = this.baseUrl + "/api/para-professionals";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ParaProfessionalDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ParaProfessionalDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<ParaProfessionalDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ParaProfessionalDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAddDiseaseClient {
    /**
     * Adds a disease
     */
    handle(request: AddDiseaseCommand): Observable<DiseaseDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AddDiseaseClient implements IAddDiseaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Adds a disease
     */
    handle(request: AddDiseaseCommand): Observable<DiseaseDto> {
        let url_ = this.baseUrl + "/api/diseases";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DiseaseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DiseaseDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<DiseaseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DiseaseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDeleteDiseaseClient {
    /**
     * Deletes a disease
     */
    handle(request: DeleteDiseaseCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class DeleteDiseaseClient implements IDeleteDiseaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Deletes a disease
     */
    handle(request: DeleteDiseaseCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/diseases";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetDiseasesClient {
    /**
     * Gets the list of diseases
     */
    handle(): Observable<DiseaseDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class GetDiseasesClient implements IGetDiseasesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets the list of diseases
     */
    handle(): Observable<DiseaseDto[]> {
        let url_ = this.baseUrl + "/api/diseases";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DiseaseDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DiseaseDto[]>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<DiseaseDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DiseaseDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetAuthTokenClient {
    /**
     * Authenticates a user
     */
    handle(request: CreateAuthTokenCommand): Observable<AuthResponseDto>;
}

@Injectable({
    providedIn: 'root'
})
export class GetAuthTokenClient implements IGetAuthTokenClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Authenticates a user
     */
    handle(request: CreateAuthTokenCommand): Observable<AuthResponseDto> {
        let url_ = this.baseUrl + "/api/auth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthResponseDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<AuthResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGetSystemRolesClient {
    /**
     * Gets all the available roles in the system
     */
    handle(): Observable<string[]>;
}

@Injectable({
    providedIn: 'root'
})
export class GetSystemRolesClient implements IGetSystemRolesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets all the available roles in the system
     */
    handle(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/authenticate/roles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ServerResponse.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IPasswordResetClient {
    /**
     * Requests a user password reset
     */
    handle(request: ResetPasswordCommand): Observable<string>;
}

@Injectable({
    providedIn: 'root'
})
export class PasswordResetClient implements IPasswordResetClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Requests a user password reset
     */
    handle(request: ResetPasswordCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/auth/password-reset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISetPasswordClient {
    /**
     * Sets a new user password
     */
    handle(request: SetPasswordCommand): Observable<ServerResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class SetPasswordClient implements ISetPasswordClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Sets a new user password
     */
    handle(request: SetPasswordCommand): Observable<ServerResponse> {
        let url_ = this.baseUrl + "/api/auth/set-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServerResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServerResponse>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<ServerResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServerResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ICreateUserClient {
    /**
     * Allows an admin to create a user account
     */
    handle(request: CreateUserCommand): Observable<UserListDto>;
}

@Injectable({
    providedIn: 'root'
})
export class CreateUserClient implements ICreateUserClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Allows an admin to create a user account
     */
    handle(request: CreateUserCommand): Observable<UserListDto> {
        let url_ = this.baseUrl + "/api/account/CreateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHandle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserListDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserListDto>;
        }));
    }

    protected processHandle(response: HttpResponseBase): Observable<UserListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class DeleteUserCommand implements IDeleteUserCommand {
    id?: string;

    constructor(data?: IDeleteUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteUserCommand {
    id?: string;
}

export class UserListDto implements IUserListDto {
    id?: string;
    name?: string;
    email?: string;
    roles?: string;
    country?: string;
    countryFlag?: string;

    constructor(data?: IUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.roles = _data["roles"];
            this.country = _data["country"];
            this.countryFlag = _data["countryFlag"];
        }
    }

    static fromJS(data: any): UserListDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["roles"] = this.roles;
        data["country"] = this.country;
        data["countryFlag"] = this.countryFlag;
        return data;
    }
}

export interface IUserListDto {
    id?: string;
    name?: string;
    email?: string;
    roles?: string;
    country?: string;
    countryFlag?: string;
}

export class SpeciesDto implements ISpeciesDto {
    id?: number;
    name?: string;

    constructor(data?: ISpeciesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): SpeciesDto {
        data = typeof data === 'object' ? data : {};
        let result = new SpeciesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface ISpeciesDto {
    id?: number;
    name?: string;
}

export class AddSpeciesCommand implements IAddSpeciesCommand {
    name?: string;

    constructor(data?: IAddSpeciesCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AddSpeciesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddSpeciesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IAddSpeciesCommand {
    name?: string;
}

export class DeleteSpeciesCommand implements IDeleteSpeciesCommand {
    id?: number;

    constructor(data?: IDeleteSpeciesCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteSpeciesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteSpeciesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteSpeciesCommand {
    id?: number;
}

export class UpdateSpeciesCommand implements IUpdateSpeciesCommand {
    id?: number;
    name?: string;

    constructor(data?: IUpdateSpeciesCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UpdateSpeciesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSpeciesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IUpdateSpeciesCommand {
    id?: number;
    name?: string;
}

export class ServerResponse implements IServerResponse {
    summary?: string;
    errors?: string[];
    isError?: boolean;

    constructor(data?: IServerResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.summary = _data["summary"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(item);
            }
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ServerResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ServerResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["summary"] = this.summary;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        data["isError"] = this.isError;
        return data;
    }
}

export interface IServerResponse {
    summary?: string;
    errors?: string[];
    isError?: boolean;
}

export class AddDiagnosticTestCommand implements IAddDiagnosticTestCommand {
    reportId?: number;
    name?: string;
    numberTested?: number;
    numberPositive?: number;
    numberNegative?: number;
    professionalId?: number;

    constructor(data?: IAddDiagnosticTestCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reportId = _data["reportId"];
            this.name = _data["name"];
            this.numberTested = _data["numberTested"];
            this.numberPositive = _data["numberPositive"];
            this.numberNegative = _data["numberNegative"];
            this.professionalId = _data["professionalId"];
        }
    }

    static fromJS(data: any): AddDiagnosticTestCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddDiagnosticTestCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reportId"] = this.reportId;
        data["name"] = this.name;
        data["numberTested"] = this.numberTested;
        data["numberPositive"] = this.numberPositive;
        data["numberNegative"] = this.numberNegative;
        data["professionalId"] = this.professionalId;
        return data;
    }
}

export interface IAddDiagnosticTestCommand {
    reportId?: number;
    name?: string;
    numberTested?: number;
    numberPositive?: number;
    numberNegative?: number;
    professionalId?: number;
}

export class VaccinationDto implements IVaccinationDto {
    id?: number;
    name?: string;
    numberVaccinated?: number;
    reportId?: number;
    isHuman?: boolean;
    isAnimal?: boolean;
    professionalId?: number | undefined;
    professionalName?: string;

    constructor(data?: IVaccinationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.numberVaccinated = _data["numberVaccinated"];
            this.reportId = _data["reportId"];
            this.isHuman = _data["isHuman"];
            this.isAnimal = _data["isAnimal"];
            this.professionalId = _data["professionalId"];
            this.professionalName = _data["professionalName"];
        }
    }

    static fromJS(data: any): VaccinationDto {
        data = typeof data === 'object' ? data : {};
        let result = new VaccinationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["numberVaccinated"] = this.numberVaccinated;
        data["reportId"] = this.reportId;
        data["isHuman"] = this.isHuman;
        data["isAnimal"] = this.isAnimal;
        data["professionalId"] = this.professionalId;
        data["professionalName"] = this.professionalName;
        return data;
    }
}

export interface IVaccinationDto {
    id?: number;
    name?: string;
    numberVaccinated?: number;
    reportId?: number;
    isHuman?: boolean;
    isAnimal?: boolean;
    professionalId?: number | undefined;
    professionalName?: string;
}

export class AddVaccinationCommand implements IAddVaccinationCommand {
    reportId?: number;
    name?: string;
    numberVaccinated?: number;
    human?: boolean;
    animal?: boolean;
    professionalId?: number | undefined;

    constructor(data?: IAddVaccinationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reportId = _data["reportId"];
            this.name = _data["name"];
            this.numberVaccinated = _data["numberVaccinated"];
            this.human = _data["human"];
            this.animal = _data["animal"];
            this.professionalId = _data["professionalId"];
        }
    }

    static fromJS(data: any): AddVaccinationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddVaccinationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reportId"] = this.reportId;
        data["name"] = this.name;
        data["numberVaccinated"] = this.numberVaccinated;
        data["human"] = this.human;
        data["animal"] = this.animal;
        data["professionalId"] = this.professionalId;
        return data;
    }
}

export interface IAddVaccinationCommand {
    reportId?: number;
    name?: string;
    numberVaccinated?: number;
    human?: boolean;
    animal?: boolean;
    professionalId?: number | undefined;
}

export class ReportDto implements IReportDto {
    id?: number | undefined;
    occurrenceId?: number;
    occurrenceTitle?: string;
    occurrenceRegion?: string;
    occurrenceCountryFlag?: string;
    diseaseId?: number;
    diseaseName?: string;
    speciesId?: number;
    speciesName?: string;
    notifiabilityPoints?: number;
    isDiseaseMonitored?: boolean;
    isDiseaseNotifiable?: boolean;
    location?: string;
    created?: string;
    infected?: number;
    exposed?: number;
    mortality?: number;
    humansInfected?: number | undefined;
    humansExposed?: number | undefined;
    humansMortality?: number | undefined;
    isOngoing?: boolean;
    isVerified?: boolean;
    stampingOut?: boolean;
    destructionOfCorpses?: boolean;
    disinfection?: boolean;
    observation?: boolean;
    observationDuration?: string | undefined;
    quarantine?: boolean;
    quarantineDuration?: string | undefined;
    movementControl?: boolean;
    movementControlMeasures?: string | undefined;
    treatment?: boolean;
    treatmentDetails?: string | undefined;
    medications?: MedicationDto[];
    tested?: boolean;
    diagnosticTests?: DiagnosticTestDto[];
    vaccinated?: boolean;
    vaccinations?: VaccinationDto[];

    constructor(data?: IReportDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.occurrenceId = _data["occurrenceId"];
            this.occurrenceTitle = _data["occurrenceTitle"];
            this.occurrenceRegion = _data["occurrenceRegion"];
            this.occurrenceCountryFlag = _data["occurrenceCountryFlag"];
            this.diseaseId = _data["diseaseId"];
            this.diseaseName = _data["diseaseName"];
            this.speciesId = _data["speciesId"];
            this.speciesName = _data["speciesName"];
            this.notifiabilityPoints = _data["notifiabilityPoints"];
            this.isDiseaseMonitored = _data["isDiseaseMonitored"];
            this.isDiseaseNotifiable = _data["isDiseaseNotifiable"];
            this.location = _data["location"];
            this.created = _data["created"];
            this.infected = _data["infected"];
            this.exposed = _data["exposed"];
            this.mortality = _data["mortality"];
            this.humansInfected = _data["humansInfected"];
            this.humansExposed = _data["humansExposed"];
            this.humansMortality = _data["humansMortality"];
            this.isOngoing = _data["isOngoing"];
            this.isVerified = _data["isVerified"];
            this.stampingOut = _data["stampingOut"];
            this.destructionOfCorpses = _data["destructionOfCorpses"];
            this.disinfection = _data["disinfection"];
            this.observation = _data["observation"];
            this.observationDuration = _data["observationDuration"];
            this.quarantine = _data["quarantine"];
            this.quarantineDuration = _data["quarantineDuration"];
            this.movementControl = _data["movementControl"];
            this.movementControlMeasures = _data["movementControlMeasures"];
            this.treatment = _data["treatment"];
            this.treatmentDetails = _data["treatmentDetails"];
            if (Array.isArray(_data["medications"])) {
                this.medications = [] as any;
                for (let item of _data["medications"])
                    this.medications!.push(MedicationDto.fromJS(item));
            }
            this.tested = _data["tested"];
            if (Array.isArray(_data["diagnosticTests"])) {
                this.diagnosticTests = [] as any;
                for (let item of _data["diagnosticTests"])
                    this.diagnosticTests!.push(DiagnosticTestDto.fromJS(item));
            }
            this.vaccinated = _data["vaccinated"];
            if (Array.isArray(_data["vaccinations"])) {
                this.vaccinations = [] as any;
                for (let item of _data["vaccinations"])
                    this.vaccinations!.push(VaccinationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["occurrenceId"] = this.occurrenceId;
        data["occurrenceTitle"] = this.occurrenceTitle;
        data["occurrenceRegion"] = this.occurrenceRegion;
        data["occurrenceCountryFlag"] = this.occurrenceCountryFlag;
        data["diseaseId"] = this.diseaseId;
        data["diseaseName"] = this.diseaseName;
        data["speciesId"] = this.speciesId;
        data["speciesName"] = this.speciesName;
        data["notifiabilityPoints"] = this.notifiabilityPoints;
        data["isDiseaseMonitored"] = this.isDiseaseMonitored;
        data["isDiseaseNotifiable"] = this.isDiseaseNotifiable;
        data["location"] = this.location;
        data["created"] = this.created;
        data["infected"] = this.infected;
        data["exposed"] = this.exposed;
        data["mortality"] = this.mortality;
        data["humansInfected"] = this.humansInfected;
        data["humansExposed"] = this.humansExposed;
        data["humansMortality"] = this.humansMortality;
        data["isOngoing"] = this.isOngoing;
        data["isVerified"] = this.isVerified;
        data["stampingOut"] = this.stampingOut;
        data["destructionOfCorpses"] = this.destructionOfCorpses;
        data["disinfection"] = this.disinfection;
        data["observation"] = this.observation;
        data["observationDuration"] = this.observationDuration;
        data["quarantine"] = this.quarantine;
        data["quarantineDuration"] = this.quarantineDuration;
        data["movementControl"] = this.movementControl;
        data["movementControlMeasures"] = this.movementControlMeasures;
        data["treatment"] = this.treatment;
        data["treatmentDetails"] = this.treatmentDetails;
        if (Array.isArray(this.medications)) {
            data["medications"] = [];
            for (let item of this.medications)
                data["medications"].push(item.toJSON());
        }
        data["tested"] = this.tested;
        if (Array.isArray(this.diagnosticTests)) {
            data["diagnosticTests"] = [];
            for (let item of this.diagnosticTests)
                data["diagnosticTests"].push(item.toJSON());
        }
        data["vaccinated"] = this.vaccinated;
        if (Array.isArray(this.vaccinations)) {
            data["vaccinations"] = [];
            for (let item of this.vaccinations)
                data["vaccinations"].push(item.toJSON());
        }
        return data;
    }
}

export interface IReportDto {
    id?: number | undefined;
    occurrenceId?: number;
    occurrenceTitle?: string;
    occurrenceRegion?: string;
    occurrenceCountryFlag?: string;
    diseaseId?: number;
    diseaseName?: string;
    speciesId?: number;
    speciesName?: string;
    notifiabilityPoints?: number;
    isDiseaseMonitored?: boolean;
    isDiseaseNotifiable?: boolean;
    location?: string;
    created?: string;
    infected?: number;
    exposed?: number;
    mortality?: number;
    humansInfected?: number | undefined;
    humansExposed?: number | undefined;
    humansMortality?: number | undefined;
    isOngoing?: boolean;
    isVerified?: boolean;
    stampingOut?: boolean;
    destructionOfCorpses?: boolean;
    disinfection?: boolean;
    observation?: boolean;
    observationDuration?: string | undefined;
    quarantine?: boolean;
    quarantineDuration?: string | undefined;
    movementControl?: boolean;
    movementControlMeasures?: string | undefined;
    treatment?: boolean;
    treatmentDetails?: string | undefined;
    medications?: MedicationDto[];
    tested?: boolean;
    diagnosticTests?: DiagnosticTestDto[];
    vaccinated?: boolean;
    vaccinations?: VaccinationDto[];
}

export class MedicationDto implements IMedicationDto {
    id?: number;
    reportId?: number;
    name?: string;
    dosage?: string;

    constructor(data?: IMedicationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.reportId = _data["reportId"];
            this.name = _data["name"];
            this.dosage = _data["dosage"];
        }
    }

    static fromJS(data: any): MedicationDto {
        data = typeof data === 'object' ? data : {};
        let result = new MedicationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["reportId"] = this.reportId;
        data["name"] = this.name;
        data["dosage"] = this.dosage;
        return data;
    }
}

export interface IMedicationDto {
    id?: number;
    reportId?: number;
    name?: string;
    dosage?: string;
}

export class DiagnosticTestDto implements IDiagnosticTestDto {
    id?: number;
    name?: string;
    reportId?: number;
    numberTested?: number;
    numberPositive?: number;
    numberNegative?: number;
    professionalId?: number;
    professionalName?: string;

    constructor(data?: IDiagnosticTestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.reportId = _data["reportId"];
            this.numberTested = _data["numberTested"];
            this.numberPositive = _data["numberPositive"];
            this.numberNegative = _data["numberNegative"];
            this.professionalId = _data["professionalId"];
            this.professionalName = _data["professionalName"];
        }
    }

    static fromJS(data: any): DiagnosticTestDto {
        data = typeof data === 'object' ? data : {};
        let result = new DiagnosticTestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["reportId"] = this.reportId;
        data["numberTested"] = this.numberTested;
        data["numberPositive"] = this.numberPositive;
        data["numberNegative"] = this.numberNegative;
        data["professionalId"] = this.professionalId;
        data["professionalName"] = this.professionalName;
        return data;
    }
}

export interface IDiagnosticTestDto {
    id?: number;
    name?: string;
    reportId?: number;
    numberTested?: number;
    numberPositive?: number;
    numberNegative?: number;
    professionalId?: number;
    professionalName?: string;
}

export class CreateReportCommand implements ICreateReportCommand {
    occurrenceId?: number | undefined;
    countryId?: number;
    regionId?: number;
    communityId?: number | undefined;
    districtId?: number | undefined;
    municipalityId?: number | undefined;
    diseaseId?: number;
    speciesId?: number;
    numberExposed?: number;
    numberInfected?: number;
    mortality?: number;
    humanInfection?: boolean;
    humansInfected?: number | undefined;
    humansExposed?: number | undefined;
    humansMortality?: number | undefined;
    isOngoing?: boolean;
    isVerified?: boolean;
    reportType?: ReportType;
    longitude?: number | undefined;
    latitude?: number | undefined;
    stampingOut?: boolean;
    destructionOfCorpses?: boolean;
    corpsesDestroyed?: number | undefined;
    disinfection?: boolean;
    observation?: boolean;
    observationDuration?: string | undefined;
    quarantine?: boolean;
    quarantineDuration?: string | undefined;
    movementControl?: boolean;
    movementControlMeasures?: string | undefined;
    treatment?: boolean;
    treatmentDetails?: string | undefined;
    occurenceDate?: Date;
    diagnosticTests?: DiagnosticTestDto[];
    medications?: MedicationDto[];
    vaccinations?: VaccinationDto[];

    constructor(data?: ICreateReportCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.occurrenceId = _data["occurrenceId"];
            this.countryId = _data["countryId"];
            this.regionId = _data["regionId"];
            this.communityId = _data["communityId"];
            this.districtId = _data["districtId"];
            this.municipalityId = _data["municipalityId"];
            this.diseaseId = _data["diseaseId"];
            this.speciesId = _data["speciesId"];
            this.numberExposed = _data["numberExposed"];
            this.numberInfected = _data["numberInfected"];
            this.mortality = _data["mortality"];
            this.humanInfection = _data["humanInfection"];
            this.humansInfected = _data["humansInfected"];
            this.humansExposed = _data["humansExposed"];
            this.humansMortality = _data["humansMortality"];
            this.isOngoing = _data["isOngoing"];
            this.isVerified = _data["isVerified"];
            this.reportType = _data["reportType"];
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
            this.stampingOut = _data["stampingOut"];
            this.destructionOfCorpses = _data["destructionOfCorpses"];
            this.corpsesDestroyed = _data["corpsesDestroyed"];
            this.disinfection = _data["disinfection"];
            this.observation = _data["observation"];
            this.observationDuration = _data["observationDuration"];
            this.quarantine = _data["quarantine"];
            this.quarantineDuration = _data["quarantineDuration"];
            this.movementControl = _data["movementControl"];
            this.movementControlMeasures = _data["movementControlMeasures"];
            this.treatment = _data["treatment"];
            this.treatmentDetails = _data["treatmentDetails"];
            this.occurenceDate = _data["occurenceDate"] ? new Date(_data["occurenceDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["diagnosticTests"])) {
                this.diagnosticTests = [] as any;
                for (let item of _data["diagnosticTests"])
                    this.diagnosticTests!.push(DiagnosticTestDto.fromJS(item));
            }
            if (Array.isArray(_data["medications"])) {
                this.medications = [] as any;
                for (let item of _data["medications"])
                    this.medications!.push(MedicationDto.fromJS(item));
            }
            if (Array.isArray(_data["vaccinations"])) {
                this.vaccinations = [] as any;
                for (let item of _data["vaccinations"])
                    this.vaccinations!.push(VaccinationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateReportCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReportCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["occurrenceId"] = this.occurrenceId;
        data["countryId"] = this.countryId;
        data["regionId"] = this.regionId;
        data["communityId"] = this.communityId;
        data["districtId"] = this.districtId;
        data["municipalityId"] = this.municipalityId;
        data["diseaseId"] = this.diseaseId;
        data["speciesId"] = this.speciesId;
        data["numberExposed"] = this.numberExposed;
        data["numberInfected"] = this.numberInfected;
        data["mortality"] = this.mortality;
        data["humanInfection"] = this.humanInfection;
        data["humansInfected"] = this.humansInfected;
        data["humansExposed"] = this.humansExposed;
        data["humansMortality"] = this.humansMortality;
        data["isOngoing"] = this.isOngoing;
        data["isVerified"] = this.isVerified;
        data["reportType"] = this.reportType;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["stampingOut"] = this.stampingOut;
        data["destructionOfCorpses"] = this.destructionOfCorpses;
        data["corpsesDestroyed"] = this.corpsesDestroyed;
        data["disinfection"] = this.disinfection;
        data["observation"] = this.observation;
        data["observationDuration"] = this.observationDuration;
        data["quarantine"] = this.quarantine;
        data["quarantineDuration"] = this.quarantineDuration;
        data["movementControl"] = this.movementControl;
        data["movementControlMeasures"] = this.movementControlMeasures;
        data["treatment"] = this.treatment;
        data["treatmentDetails"] = this.treatmentDetails;
        data["occurenceDate"] = this.occurenceDate ? formatDate(this.occurenceDate) : <any>undefined;
        if (Array.isArray(this.diagnosticTests)) {
            data["diagnosticTests"] = [];
            for (let item of this.diagnosticTests)
                data["diagnosticTests"].push(item.toJSON());
        }
        if (Array.isArray(this.medications)) {
            data["medications"] = [];
            for (let item of this.medications)
                data["medications"].push(item.toJSON());
        }
        if (Array.isArray(this.vaccinations)) {
            data["vaccinations"] = [];
            for (let item of this.vaccinations)
                data["vaccinations"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreateReportCommand {
    occurrenceId?: number | undefined;
    countryId?: number;
    regionId?: number;
    communityId?: number | undefined;
    districtId?: number | undefined;
    municipalityId?: number | undefined;
    diseaseId?: number;
    speciesId?: number;
    numberExposed?: number;
    numberInfected?: number;
    mortality?: number;
    humanInfection?: boolean;
    humansInfected?: number | undefined;
    humansExposed?: number | undefined;
    humansMortality?: number | undefined;
    isOngoing?: boolean;
    isVerified?: boolean;
    reportType?: ReportType;
    longitude?: number | undefined;
    latitude?: number | undefined;
    stampingOut?: boolean;
    destructionOfCorpses?: boolean;
    corpsesDestroyed?: number | undefined;
    disinfection?: boolean;
    observation?: boolean;
    observationDuration?: string | undefined;
    quarantine?: boolean;
    quarantineDuration?: string | undefined;
    movementControl?: boolean;
    movementControlMeasures?: string | undefined;
    treatment?: boolean;
    treatmentDetails?: string | undefined;
    occurenceDate?: Date;
    diagnosticTests?: DiagnosticTestDto[];
    medications?: MedicationDto[];
    vaccinations?: VaccinationDto[];
}

export enum ReportType {
    Immediate = 0,
    FollowUp = 1,
}

export class DeleteOccurrenceCommand implements IDeleteOccurrenceCommand {
    id?: number;

    constructor(data?: IDeleteOccurrenceCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteOccurrenceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteOccurrenceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteOccurrenceCommand {
    id?: number;
}

export class DeleteReportCommand implements IDeleteReportCommand {
    id?: number;

    constructor(data?: IDeleteReportCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteReportCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteReportCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteReportCommand {
    id?: number;
}

export class OccurrenceDto implements IOccurrenceDto {
    id?: number | undefined;
    title?: string;
    dateStarted?: string;
    dateEnded?: string;
    location?: string;
    reports?: number;

    constructor(data?: IOccurrenceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.dateStarted = _data["dateStarted"];
            this.dateEnded = _data["dateEnded"];
            this.location = _data["location"];
            this.reports = _data["reports"];
        }
    }

    static fromJS(data: any): OccurrenceDto {
        data = typeof data === 'object' ? data : {};
        let result = new OccurrenceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["dateStarted"] = this.dateStarted;
        data["dateEnded"] = this.dateEnded;
        data["location"] = this.location;
        data["reports"] = this.reports;
        return data;
    }
}

export interface IOccurrenceDto {
    id?: number | undefined;
    title?: string;
    dateStarted?: string;
    dateEnded?: string;
    location?: string;
    reports?: number;
}

export class ReportListDto implements IReportListDto {
    id?: number;
    occurrenceTitle?: string;
    isVerified?: boolean;
    exposed?: number;
    infected?: number;
    mortality?: number;
    location?: string;
    created?: string;

    constructor(data?: IReportListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.occurrenceTitle = _data["occurrenceTitle"];
            this.isVerified = _data["isVerified"];
            this.exposed = _data["exposed"];
            this.infected = _data["infected"];
            this.mortality = _data["mortality"];
            this.location = _data["location"];
            this.created = _data["created"];
        }
    }

    static fromJS(data: any): ReportListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReportListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["occurrenceTitle"] = this.occurrenceTitle;
        data["isVerified"] = this.isVerified;
        data["exposed"] = this.exposed;
        data["infected"] = this.infected;
        data["mortality"] = this.mortality;
        data["location"] = this.location;
        data["created"] = this.created;
        return data;
    }
}

export interface IReportListDto {
    id?: number;
    occurrenceTitle?: string;
    isVerified?: boolean;
    exposed?: number;
    infected?: number;
    mortality?: number;
    location?: string;
    created?: string;
}

export class SendNotificationCommand implements ISendNotificationCommand {
    reportId?: number;

    constructor(data?: ISendNotificationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reportId = _data["reportId"];
        }
    }

    static fromJS(data: any): SendNotificationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SendNotificationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reportId"] = this.reportId;
        return data;
    }
}

export interface ISendNotificationCommand {
    reportId?: number;
}

export class VerifyReportCommand implements IVerifyReportCommand {
    id?: number;

    constructor(data?: IVerifyReportCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): VerifyReportCommand {
        data = typeof data === 'object' ? data : {};
        let result = new VerifyReportCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IVerifyReportCommand {
    id?: number;
}

export class CommunityDto implements ICommunityDto {
    id?: number;
    districtId?: number;
    name?: string;
    districtName?: string;

    constructor(data?: ICommunityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.districtId = _data["districtId"];
            this.name = _data["name"];
            this.districtName = _data["districtName"];
        }
    }

    static fromJS(data: any): CommunityDto {
        data = typeof data === 'object' ? data : {};
        let result = new CommunityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["districtId"] = this.districtId;
        data["name"] = this.name;
        data["districtName"] = this.districtName;
        return data;
    }
}

export interface ICommunityDto {
    id?: number;
    districtId?: number;
    name?: string;
    districtName?: string;
}

export class AddCommunityCommand implements IAddCommunityCommand {
    districtId?: number;
    name?: string;

    constructor(data?: IAddCommunityCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.districtId = _data["districtId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AddCommunityCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddCommunityCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["districtId"] = this.districtId;
        data["name"] = this.name;
        return data;
    }
}

export interface IAddCommunityCommand {
    districtId?: number;
    name?: string;
}

export class CountryDto implements ICountryDto {
    id?: number;
    name?: string;
    code?: string;
    flag?: string;
    regions?: number;

    constructor(data?: ICountryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.flag = _data["flag"];
            this.regions = _data["regions"];
        }
    }

    static fromJS(data: any): CountryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CountryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["flag"] = this.flag;
        data["regions"] = this.regions;
        return data;
    }
}

export interface ICountryDto {
    id?: number;
    name?: string;
    code?: string;
    flag?: string;
    regions?: number;
}

export class AddCountryCommand implements IAddCountryCommand {
    name?: string;
    flag?: string;
    code?: string;

    constructor(data?: IAddCountryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.flag = _data["flag"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): AddCountryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddCountryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["flag"] = this.flag;
        data["code"] = this.code;
        return data;
    }
}

export interface IAddCountryCommand {
    name?: string;
    flag?: string;
    code?: string;
}

export class DistrictDto implements IDistrictDto {
    id?: number;
    municipalityId?: number;
    name?: string;
    municipalityName?: string;

    constructor(data?: IDistrictDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.municipalityId = _data["municipalityId"];
            this.name = _data["name"];
            this.municipalityName = _data["municipalityName"];
        }
    }

    static fromJS(data: any): DistrictDto {
        data = typeof data === 'object' ? data : {};
        let result = new DistrictDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["municipalityId"] = this.municipalityId;
        data["name"] = this.name;
        data["municipalityName"] = this.municipalityName;
        return data;
    }
}

export interface IDistrictDto {
    id?: number;
    municipalityId?: number;
    name?: string;
    municipalityName?: string;
}

export class AddDistrictCommand implements IAddDistrictCommand {
    municipalityId?: number;
    name?: string;

    constructor(data?: IAddDistrictCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.municipalityId = _data["municipalityId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AddDistrictCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddDistrictCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["municipalityId"] = this.municipalityId;
        data["name"] = this.name;
        return data;
    }
}

export interface IAddDistrictCommand {
    municipalityId?: number;
    name?: string;
}

export class MunicipalityDto implements IMunicipalityDto {
    id?: number;
    regionId?: number;
    name?: string;
    regionName?: string;

    constructor(data?: IMunicipalityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.regionId = _data["regionId"];
            this.name = _data["name"];
            this.regionName = _data["regionName"];
        }
    }

    static fromJS(data: any): MunicipalityDto {
        data = typeof data === 'object' ? data : {};
        let result = new MunicipalityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["regionId"] = this.regionId;
        data["name"] = this.name;
        data["regionName"] = this.regionName;
        return data;
    }
}

export interface IMunicipalityDto {
    id?: number;
    regionId?: number;
    name?: string;
    regionName?: string;
}

export class AddMunicipalityCommand implements IAddMunicipalityCommand {
    regionId?: number;
    name?: string;

    constructor(data?: IAddMunicipalityCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionId = _data["regionId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AddMunicipalityCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddMunicipalityCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        data["name"] = this.name;
        return data;
    }
}

export interface IAddMunicipalityCommand {
    regionId?: number;
    name?: string;
}

export class RegionDto implements IRegionDto {
    id?: number;
    name?: string;
    code?: string;
    countryName?: string;
    countryFlag?: string;
    countryId?: number;

    constructor(data?: IRegionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.countryName = _data["countryName"];
            this.countryFlag = _data["countryFlag"];
            this.countryId = _data["countryId"];
        }
    }

    static fromJS(data: any): RegionDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["countryName"] = this.countryName;
        data["countryFlag"] = this.countryFlag;
        data["countryId"] = this.countryId;
        return data;
    }
}

export interface IRegionDto {
    id?: number;
    name?: string;
    code?: string;
    countryName?: string;
    countryFlag?: string;
    countryId?: number;
}

export class AddRegionCommand implements IAddRegionCommand {
    countryId?: number;
    name?: string;
    code?: string;

    constructor(data?: IAddRegionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.countryId = _data["countryId"];
            this.name = _data["name"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): AddRegionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddRegionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["countryId"] = this.countryId;
        data["name"] = this.name;
        data["code"] = this.code;
        return data;
    }
}

export interface IAddRegionCommand {
    countryId?: number;
    name?: string;
    code?: string;
}

export class DeleteCommunityCommand implements IDeleteCommunityCommand {
    id?: number;

    constructor(data?: IDeleteCommunityCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteCommunityCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCommunityCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteCommunityCommand {
    id?: number;
}

export class DeleteDistrictCommand implements IDeleteDistrictCommand {
    id?: number;

    constructor(data?: IDeleteDistrictCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteDistrictCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteDistrictCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteDistrictCommand {
    id?: number;
}

export class DeleteMunicipalityCommand implements IDeleteMunicipalityCommand {
    id?: number;

    constructor(data?: IDeleteMunicipalityCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteMunicipalityCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteMunicipalityCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteMunicipalityCommand {
    id?: number;
}

export class DeleteRegionCommand implements IDeleteRegionCommand {
    id?: number;

    constructor(data?: IDeleteRegionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteRegionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteRegionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteRegionCommand {
    id?: number;
}

export class NotificationRecipientDto implements INotificationRecipientDto {
    id?: number;
    name?: string;
    email?: string;
    institution?: string;
    isEnabled?: boolean;

    constructor(data?: INotificationRecipientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.institution = _data["institution"];
            this.isEnabled = _data["isEnabled"];
        }
    }

    static fromJS(data: any): NotificationRecipientDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationRecipientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["institution"] = this.institution;
        data["isEnabled"] = this.isEnabled;
        return data;
    }
}

export interface INotificationRecipientDto {
    id?: number;
    name?: string;
    email?: string;
    institution?: string;
    isEnabled?: boolean;
}

export class AddRecipientCommand implements IAddRecipientCommand {
    name?: string;
    email?: string;
    institution?: string;
    isEnabled?: boolean;

    constructor(data?: IAddRecipientCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.institution = _data["institution"];
            this.isEnabled = _data["isEnabled"];
        }
    }

    static fromJS(data: any): AddRecipientCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddRecipientCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["institution"] = this.institution;
        data["isEnabled"] = this.isEnabled;
        return data;
    }
}

export interface IAddRecipientCommand {
    name?: string;
    email?: string;
    institution?: string;
    isEnabled?: boolean;
}

export class DeleteRecipientCommand implements IDeleteRecipientCommand {
    id?: number;

    constructor(data?: IDeleteRecipientCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteRecipientCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteRecipientCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteRecipientCommand {
    id?: number;
}

export class InstitutionDto implements IInstitutionDto {
    id?: number;
    name?: string;
    publicSector?: boolean;
    type?: string | undefined;
    paraProfessionals?: ParaProfessionalDto[];

    constructor(data?: IInstitutionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.publicSector = _data["publicSector"];
            this.type = _data["type"];
            if (Array.isArray(_data["paraProfessionals"])) {
                this.paraProfessionals = [] as any;
                for (let item of _data["paraProfessionals"])
                    this.paraProfessionals!.push(ParaProfessionalDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InstitutionDto {
        data = typeof data === 'object' ? data : {};
        let result = new InstitutionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["publicSector"] = this.publicSector;
        data["type"] = this.type;
        if (Array.isArray(this.paraProfessionals)) {
            data["paraProfessionals"] = [];
            for (let item of this.paraProfessionals)
                data["paraProfessionals"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInstitutionDto {
    id?: number;
    name?: string;
    publicSector?: boolean;
    type?: string | undefined;
    paraProfessionals?: ParaProfessionalDto[];
}

export class ParaProfessionalDto implements IParaProfessionalDto {
    id?: number;
    name?: string;
    email?: string;
    phone?: string;
    position?: string;
    institutionId?: number | undefined;
    institutionName?: string | undefined;

    constructor(data?: IParaProfessionalDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.position = _data["position"];
            this.institutionId = _data["institutionId"];
            this.institutionName = _data["institutionName"];
        }
    }

    static fromJS(data: any): ParaProfessionalDto {
        data = typeof data === 'object' ? data : {};
        let result = new ParaProfessionalDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["position"] = this.position;
        data["institutionId"] = this.institutionId;
        data["institutionName"] = this.institutionName;
        return data;
    }
}

export interface IParaProfessionalDto {
    id?: number;
    name?: string;
    email?: string;
    phone?: string;
    position?: string;
    institutionId?: number | undefined;
    institutionName?: string | undefined;
}

export class AddInstitutionCommand implements IAddInstitutionCommand {
    name?: string;
    publicSector?: boolean;
    type?: string | undefined;

    constructor(data?: IAddInstitutionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.publicSector = _data["publicSector"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): AddInstitutionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddInstitutionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["publicSector"] = this.publicSector;
        data["type"] = this.type;
        return data;
    }
}

export interface IAddInstitutionCommand {
    name?: string;
    publicSector?: boolean;
    type?: string | undefined;
}

export class AddParaProfessionalCommand implements IAddParaProfessionalCommand {
    name?: string;
    email?: string;
    phone?: string;
    position?: string;
    institutionId?: number | undefined;

    constructor(data?: IAddParaProfessionalCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.position = _data["position"];
            this.institutionId = _data["institutionId"];
        }
    }

    static fromJS(data: any): AddParaProfessionalCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddParaProfessionalCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["position"] = this.position;
        data["institutionId"] = this.institutionId;
        return data;
    }
}

export interface IAddParaProfessionalCommand {
    name?: string;
    email?: string;
    phone?: string;
    position?: string;
    institutionId?: number | undefined;
}

export class DeleteInstitutionCommand implements IDeleteInstitutionCommand {
    id?: number;

    constructor(data?: IDeleteInstitutionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteInstitutionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteInstitutionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteInstitutionCommand {
    id?: number;
}

export class DeleteParaProfessionalCommand implements IDeleteParaProfessionalCommand {
    id?: number;

    constructor(data?: IDeleteParaProfessionalCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteParaProfessionalCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteParaProfessionalCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteParaProfessionalCommand {
    id?: number;
}

export class UpdateInstitutionCommand implements IUpdateInstitutionCommand {
    institutionId?: number;
    name?: string;
    publicSector?: boolean;
    type?: string | undefined;

    constructor(data?: IUpdateInstitutionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.institutionId = _data["institutionId"];
            this.name = _data["name"];
            this.publicSector = _data["publicSector"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): UpdateInstitutionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateInstitutionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["institutionId"] = this.institutionId;
        data["name"] = this.name;
        data["publicSector"] = this.publicSector;
        data["type"] = this.type;
        return data;
    }
}

export interface IUpdateInstitutionCommand {
    institutionId?: number;
    name?: string;
    publicSector?: boolean;
    type?: string | undefined;
}

export class UpdateParaProfessionalCommand implements IUpdateParaProfessionalCommand {
    paraProfessionalId?: number;
    email?: string;
    phone?: string;
    position?: string;

    constructor(data?: IUpdateParaProfessionalCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paraProfessionalId = _data["paraProfessionalId"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.position = _data["position"];
        }
    }

    static fromJS(data: any): UpdateParaProfessionalCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateParaProfessionalCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paraProfessionalId"] = this.paraProfessionalId;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["position"] = this.position;
        return data;
    }
}

export interface IUpdateParaProfessionalCommand {
    paraProfessionalId?: number;
    email?: string;
    phone?: string;
    position?: string;
}

export class DiseaseDto implements IDiseaseDto {
    id?: number;
    name?: string;
    zoonotic?: boolean;
    code?: string;
    classification?: string;
    speciesId?: number;

    constructor(data?: IDiseaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.zoonotic = _data["zoonotic"];
            this.code = _data["code"];
            this.classification = _data["classification"];
            this.speciesId = _data["speciesId"];
        }
    }

    static fromJS(data: any): DiseaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new DiseaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["zoonotic"] = this.zoonotic;
        data["code"] = this.code;
        data["classification"] = this.classification;
        data["speciesId"] = this.speciesId;
        return data;
    }
}

export interface IDiseaseDto {
    id?: number;
    name?: string;
    zoonotic?: boolean;
    code?: string;
    classification?: string;
    speciesId?: number;
}

export class AddDiseaseCommand implements IAddDiseaseCommand {
    name?: string;
    code?: string;
    classification?: string;
    zoonotic?: boolean;
    speciesId?: number;

    constructor(data?: IAddDiseaseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.classification = _data["classification"];
            this.zoonotic = _data["zoonotic"];
            this.speciesId = _data["speciesId"];
        }
    }

    static fromJS(data: any): AddDiseaseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddDiseaseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["classification"] = this.classification;
        data["zoonotic"] = this.zoonotic;
        data["speciesId"] = this.speciesId;
        return data;
    }
}

export interface IAddDiseaseCommand {
    name?: string;
    code?: string;
    classification?: string;
    zoonotic?: boolean;
    speciesId?: number;
}

export class DeleteDiseaseCommand implements IDeleteDiseaseCommand {
    id?: number;

    constructor(data?: IDeleteDiseaseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteDiseaseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteDiseaseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteDiseaseCommand {
    id?: number;
}

export class AuthResponseDto implements IAuthResponseDto {
    appUserId?: string;
    firstName?: string;
    lastName?: string;
    username?: string;
    email?: string;
    countryId?: number | undefined;
    countryName?: string;
    countryFlag?: string;
    authToken?: string;
    refreshToken?: string;
    roles?: string[];

    constructor(data?: IAuthResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appUserId = _data["appUserId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.countryFlag = _data["countryFlag"];
            this.authToken = _data["authToken"];
            this.refreshToken = _data["refreshToken"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): AuthResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appUserId"] = this.appUserId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["username"] = this.username;
        data["email"] = this.email;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["countryFlag"] = this.countryFlag;
        data["authToken"] = this.authToken;
        data["refreshToken"] = this.refreshToken;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IAuthResponseDto {
    appUserId?: string;
    firstName?: string;
    lastName?: string;
    username?: string;
    email?: string;
    countryId?: number | undefined;
    countryName?: string;
    countryFlag?: string;
    authToken?: string;
    refreshToken?: string;
    roles?: string[];
}

export class CreateAuthTokenCommand implements ICreateAuthTokenCommand {
    username?: string;
    password?: string;

    constructor(data?: ICreateAuthTokenCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): CreateAuthTokenCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAuthTokenCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface ICreateAuthTokenCommand {
    username?: string;
    password?: string;
}

export class ResetPasswordCommand implements IResetPasswordCommand {
    email?: string;

    constructor(data?: IResetPasswordCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): ResetPasswordCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data;
    }
}

export interface IResetPasswordCommand {
    email?: string;
}

export class SetPasswordCommand implements ISetPasswordCommand {
    resetToken?: string;
    password?: string;

    constructor(data?: ISetPasswordCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.resetToken = _data["resetToken"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): SetPasswordCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SetPasswordCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resetToken"] = this.resetToken;
        data["password"] = this.password;
        return data;
    }
}

export interface ISetPasswordCommand {
    resetToken?: string;
    password?: string;
}

export class CreateUserCommand implements ICreateUserCommand {
    firstName?: string;
    lastName?: string;
    email?: string;
    username?: string;
    password?: string;
    roles?: string[];
    countryId?: number;

    constructor(data?: ICreateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.username = _data["username"];
            this.password = _data["password"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            this.countryId = _data["countryId"];
        }
    }

    static fromJS(data: any): CreateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["username"] = this.username;
        data["password"] = this.password;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["countryId"] = this.countryId;
        return data;
    }
}

export interface ICreateUserCommand {
    firstName?: string;
    lastName?: string;
    email?: string;
    username?: string;
    password?: string;
    roles?: string[];
    countryId?: number;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}